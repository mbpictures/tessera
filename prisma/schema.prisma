// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Event {
    id              Int         @default(autoincrement()) @id
    title           String
    seatType        String
    seatMap         SeatMap?    @relation(fields: [seatMapId], references: [id])
    seatMapId       Int?
    categories      CategoriesOnEvents[]
    coverImage      String?
    coverImageSize  Int?
    personalTicket  Boolean     @default(false)
    dates           EventDate[]
    customFields    CustomField[]
}

model EventDate {
    id                  Int         @default(autoincrement()) @id
    title               String?
    event               Event       @relation(fields: [eventId], references: [id])
    eventId             Int
    date                DateTime?
    orders              Order[]
    ticketSaleStartDate DateTime?
    ticketSaleEndDate   DateTime?
    seatReservations    SeatReservation[]
}

model CustomField {
    id                  Int         @default(autoincrement()) @id
    label               String
    name                String
    isRequired          Boolean
    event               Event       @relation(fields: [eventId], references: [id])
    eventId             Int
}

model SeatMap {
    id              Int         @default(autoincrement()) @id
    events          Event[]
    orders          Order[]
    definition      String
    preview         Bytes?
    previewType     String?
}

model Category {
    id              Int         @default(autoincrement()) @id
    label           String
    price           Float
    color           String?
    activeColor     String?
    occupiedColor   String?
    events          CategoriesOnEvents[]
    tickets         Ticket[]
}

model CategoriesOnEvents {
    event           Event        @relation(fields: [eventId], references: [id])
    eventId         Int
    category        Category     @relation(fields: [categoryId], references: [id])
    categoryId      Int
    maxAmount       Int?

    @@id([eventId, categoryId])
}

model User {
    id              String      @default(uuid()) @id
    firstName       String
    lastName        String
    email           String
    address         String
    zip             String
    city            String
    countryCode     String
    regionCode      String
    orders          Order[]
    customFields    String?
}

model Order {
    id              String      @default(uuid()) @id
    user            User        @relation(fields: [userId], references: [id])
    userId          String
    paymentType     String
    paymentIntent   String?
    paymentResult   String?
    seatMap         SeatMap?    @relation(fields: [seatMapId], references: [id])
    seatMapId       Int?
    eventDate       EventDate   @relation(fields: [eventDateId], references: [id])
    eventDateId     Int
    shipping        String
    tickets         Ticket[]
    locale          String
    invoiceSent     Boolean     @default(false)
    date            DateTime    @default(now())
    task            Task?
    idempotencyKey  String      @unique
    cancellationSecret String
    refund          Refund?     @relation(fields: [refundId], references: [id])
    refundId        String?     @unique
}

model Refund {
    id              String      @default(uuid()) @id
    paymentType     String
    paymentIntent   String?
    paymentResult   String?
    ticketsRefunded Int
    refundAmount    Float
    order           Order?
    task            Task?
}

model SeatReservation {
    id              String      @default(uuid()) @id
    reservationId   String
    seatId          Int?
    categoryId      Int
    amount          Int         @default(1)
    expiresAt       DateTime
    eventDateId     Int
    eventDate       EventDate   @relation(fields: [eventDateId], references: [id])
}

model Ticket {
    id              String      @default(uuid()) @id
    order           Order       @relation(fields: [orderId], references: [id])
    orderId         String
    used            Boolean     @default(false)
    seatId          Int?
    secret          String?
    category        Category    @relation(fields: [categoryId], references: [id])
    categoryId      Int
    amount          Int         @default(1)
    firstName       String?
    lastName        String?
}

model AdminUser {
    id              Int         @default(autoincrement()) @id
    userName        String      @unique
    email           String      @unique
    password        String
    apiKeys         AdminApiKeys[]
    readRights      String
    writeRights     String
    notifications   Notification[]
    tasks           Task[]
}

model AdminApiKeys {
    id              Int         @default(autoincrement()) @id
    key             String      @unique
    user            AdminUser   @relation(fields: [userId], references: [id])
    userId          Int
    name            String
}

model Option {
    key             String      @unique
    value           String
    data            Bytes?
}

model Translation {
    id              Int         @default(autoincrement()) @id
    key             String
    namespace       String
    translations    String
}

model Notification {
    id              Int         @default(autoincrement()) @id
    user            AdminUser   @relation(fields: [userId], references: [id])
    userId          Int
    data            String?
    type            String
}

model Task {
    id              Int         @default(autoincrement()) @id
    order           Order       @relation(fields: [orderId], references: [id])
    orderId         String      @unique
    assignedUser    AdminUser?  @relation(fields: [adminUserId], references: [id])
    adminUserId     Int?
    notes           String
    refund          Refund?     @relation(fields: [refundId], references: [id])
    refundId        String?     @unique
}
